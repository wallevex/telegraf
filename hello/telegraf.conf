[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Collection offset is used to shift the collection by the given amount.
  ## This can be be used to avoid many plugins querying constraint devices
  ## at the same time by manually scheduling them in time.
  # collection_offset = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Collected metrics are rounded to the precision specified. Precision is
  ## specified as an interval with an integer + unit (e.g. 0s, 10ms, 2us, 4s).
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  ##
  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s:
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ##
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  precision = "0s"

[[inputs.mqtt_consumer]]
      servers = ["tcp://mqtt-cn-ot93vfkv202.mqtt.aliyuncs.com:1883"]
      topics = [
        "hjy-dev/t02/+/attr/"
      ]
      client_id = "GID_HJY_MQTTX@@@smart_school_dev"
      username = "Signature|LTAI5t5y4hyGmTmjVf73g9hj|mqtt-cn-ot93vfkv202"
      password = "XEKY8SVUhE6zj9+rJ4REONmzyw0="
      data_format = "json_v2"
      [[inputs.mqtt_consumer.json_v2]]
        measurement_name = "__thingsboard_raw"
        timestamp_path = "time"
        timestamp_format = "unix"
        timestamp_timezone = "Local"
        [[inputs.mqtt_consumer.json_v2.tag]]
            path = "id"
            rename = "device"
        [[inputs.mqtt_consumer.json_v2.tag]]
            path = "data.deviceType"
            rename = "profile"
            optional = true
        [[inputs.mqtt_consumer.json_v2.field]]
            path = "data.alarms"
            type = "string"
            optional = true
        [[inputs.mqtt_consumer.json_v2.object]]
            path = "data"
            excluded_keys = ["deviceType", "alarms"]

[[processors.thingsboard]]
    namepass = ["__thingsboard_raw"]
    attributes = [ "alarms" ]

[[outputs.file]]
  files = ["stdout", "./output.json"]

  data_format = "json"